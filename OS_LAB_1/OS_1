#include <stdio.h>
#include <stdlib.h>
//#include <unistd.h>
//#include <sys/wait.h>

void analyze_output(const char *output_file) {
    FILE *file = fopen(output_file, "r");
    if (file == NULL) {
        perror("fopen");
        exit(EXIT_FAILURE);
    }

    int total_lines = 0;
    int unexpected_count = 0;

    char line[256];  // Prilagodite veličinu linije prema vašim potrebama

    while (fgets(line, sizeof(line), file) != NULL) {
        total_lines++;

        if (strstr(line, "Roditelj") && strstr(line, "Dijete")) {
            unexpected_count++;
        }
    }

    fclose(file);

    double unexpected_percentage = ((double)unexpected_count / total_lines) * 100;

    printf("Total lines: %d\n", total_lines);
    printf("Unexpected events: %d\n", unexpected_count);
    printf("Percentage of unexpected events: %.2f%%\n", unexpected_percentage);
}

int main(int argc, char *argv[]) {
    setbuf(stdout, NULL);

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <number_of_children> <output_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int num_children = atoi(argv[1]);
    const char *output_file = argv[2];

    for (int i = 1; i <= num_children; ++i) {
        pid_t child_pid = fork();

        if (child_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (child_pid == 0) {
            // Child process
            printf("Dijete #%d\n", i);
            exit(EXIT_SUCCESS);
        } else {
            // Parent process
            wait(NULL); // Wait for the child to finish
            printf("Roditelj #%d\n", i);
        }
    }

    analyze_output(output_file);

    return 0;
}

